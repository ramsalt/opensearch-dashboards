#!/usr/bin/env bash

# Run Opensearch-Dashboards, using environment variables to set longopts defining Opensearch-Dashboards's
# configuration.
#
# eg. Setting the environment variable:
#
#       OPENSEARCH_STARTUPTIMEOUT=60
#
# will cause Opensearch-Dashboards to be invoked with:
#
#       --opensearch.startupTimeout=60

dashboards_vars=(
    console.enabled
    console.proxyConfig
    console.proxyFilter
    opensearch.customHeaders
    opensearch.password
    opensearch.pingTimeout
    opensearch.preserveHost
    opensearch.requestHeadersWhitelist
    opensearch.requestTimeout
    opensearch.shardTimeout
    opensearch.ssl.ca
    opensearch.ssl.cert
    opensearch.ssl.certificate
    opensearch.ssl.certificateAuthorities
    opensearch.ssl.key
    opensearch.ssl.keyPassphrase
    opensearch.ssl.verificationMode
    opensearch.ssl.verify
    opensearch.startupTimeout
    opensearch.tribe.customHeaders
    opensearch.tribe.password
    opensearch.tribe.pingTimeout
    opensearch.tribe.requestHeadersWhitelist
    opensearch.tribe.requestTimeout
    opensearch.tribe.ssl.ca
    opensearch.tribe.ssl.cert
    opensearch.tribe.ssl.certificate
    opensearch.tribe.ssl.certificateAuthorities
    opensearch.tribe.ssl.key
    opensearch.tribe.ssl.keyPassphrase
    opensearch.tribe.ssl.verificationMode
    opensearch.tribe.ssl.verify
    opensearch.tribe.url
    opensearch.tribe.username
    opensearch.url
    opensearch.username
    kibana.defaultAppId
    kibana.index
    logging.dest
    logging.quiet
    logging.silent
    logging.verbose
    ops.interval
    path.data
    pid.file
    regionmap
    regionmap.includeElasticMapsService
    server.basePath
    server.customResponseHeaders
    server.defaultRoute
    server.host
    server.maxPayloadBytes
    server.name
    server.port
    server.ssl.cert
    server.ssl.certificate
    server.ssl.certificateAuthorities
    server.ssl.cipherSuites
    server.ssl.clientAuthentication
    server.customResponseHeaders
    server.ssl.enabled
    server.ssl.key
    server.ssl.keyPassphrase
    server.ssl.redirectHttpFromPort
    server.ssl.supportedProtocols
    status.allowAnonymous
    status.v6ApiFormat
    tilemap.options.attribution
    tilemap.options.maxZoom
    tilemap.options.minZoom
    tilemap.options.subdomains
    tilemap.url
    xpack.graph.enabled
    xpack.grokdebugger.enabled
    xpack.ml.enabled
    xpack.monitoring.opensearch.password
    xpack.monitoring.opensearch.url
    xpack.monitoring.opensearch.username
    xpack.monitoring.enabled
    xpack.monitoring.kibana.collection.enabled
    xpack.monitoring.kibana.collection.interval
    xpack.monitoring.max_bucket_size
    xpack.monitoring.min_interval_seconds
    xpack.monitoring.node_resolver
    xpack.monitoring.report_stats
    xpack.monitoring.ui.container.opensearch.enabled
    xpack.monitoring.ui.enabled
    xpack.reporting.capture.concurrency
    xpack.reporting.capture.loadDelay
    xpack.reporting.capture.settleTime
    xpack.reporting.capture.timeout
    xpack.reporting.csv.maxSizeBytes
    xpack.reporting.enabled
    xpack.reporting.encryptionKey
    xpack.reporting.index
    xpack.reporting.kibanaApp
    xpack.reporting.kibanaServer.hostname
    xpack.reporting.kibanaServer.port
    xpack.reporting.kibanaServer.protocol
    xpack.reporting.queue.indexInterval
    xpack.reporting.queue.pollInterval
    xpack.reporting.queue.timeout
    xpack.reporting.roles.allow
    xpack.searchprofiler.enabled
    xpack.security.cookieName
    xpack.security.enabled
    xpack.security.encryptionKey
    xpack.security.secureCookies
    xpack.security.sessionTimeout
)

longopts=''
for dashboards_var in ${dashboards_vars[*]}; do
    # 'opensearch.url' -> 'OPENSEARCH_URL'
    env_var=$(echo ${dashboards_var^^} | tr . _)

    # Indirectly lookup env var values via the name of the var.
    # REF: http://tldp.org/LDP/abs/html/bashver2.html#EX78
    value=${!env_var}
    if [[ -n $value ]]; then
      longopt="--${dashboards_var}=${value}"
      longopts+=" ${longopt}"
    fi
done

# The virtual file /proc/self/cgroup should list the current cgroup
# membership. For each hierarchy, you can follow the cgroup path from
# this file to the cgroup filesystem (usually /sys/fs/cgroup/) and
# introspect the statistics for the cgroup for the given
# hierarchy. Alas, Docker breaks this by mounting the container
# statistics at the root while leaving the cgroup paths as the actual
# paths. Therefore, Opensearch-Dashboards provides a mechanism to override
# reading the cgroup path from /proc/self/cgroup and instead uses the
# cgroup path defined the configuration properties
# cpu.cgroup.path.override and cpuacct.cgroup.path.override.
# Therefore, we set this value here so that cgroup statistics are
# available for the container this process will run in.

exec /usr/share/opensearch-dashboards/bin/opensearch-dashboards --cpu.cgroup.path.override=/ --cpuacct.cgroup.path.override=/ ${longopts} "$@"
